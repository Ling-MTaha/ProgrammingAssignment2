swirl
library(datasets)
data(iris)
library(datasets)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
ls
209.21429 - 82.63636
cd
getwd
getwd ()
setwd ()
getwd ()
## A function that calculate the inverse of a matrix  (n,n)
## M.Taha (April-20th-2016
## Creates a list
#sets the matrx, gets the matrix, set the inverse of the matrix and gets the inverse
makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) inv <<- inverse
  getinverse <- function() inv
  list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## A function that invesese the matrix and cahs
cacheSolve <- function(x, ...) {
  inv <- x$getinverse()
  if(!is.null(inv)) {
    message("getting cached data.")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data)
  x$setinverse(inv)
  inv
}
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
}
save.image("C:\\3\\ProgrammingAssignment2\\cachematrix.R")
q()
